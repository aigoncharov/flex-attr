/*
*
*  Responsive attributes
*
*  References:
*  1) https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties#flex
*  2) https://css-tricks.com/almanac/properties/f/flex/
*  3) https://css-tricks.com/snippets/css/a-guide-to-flexbox/
*  4) https://github.com/philipwalton/flexbugs#3-min-height-on-a-flex-container-wont-apply-to-its-flex-items
*  5) http://godban.com.ua/projects/flexgrid
*
*/

// Layout
// ------------------------------

$layout-breakpoints: xs 600px, sm 960px, md 1280px, lg 1920px !default;

@mixin flex-order-for-name($sizes:null) {
    @if $sizes == null {
        $sizes: '';

        [flex-order] {
            order: 0;
        }
    }

    @for $i from -20 through 20 {
        $order: '';
        $suffix: '';

        @each $s in $sizes {
            @if $s != '' {
                $suffix: '-#{$s}="#{$i}"';
            } @else {
                $suffix: '="#{$i}"';
            }

            $order: '[flex-order#{$suffix}]';
        }

        #{$order} {
            order: #{$i};
        }
    }
}

@mixin offset-for-name($sizes:null) {
    @if $sizes == null {
        $sizes: '';
    }

    @for $i from 0 through 19 {
        $offsets: '';
        $suffix: '';

        @each $s in $sizes {
            @if $s != '' {
                $suffix: '-#{$s}="#{$i * 5}"';
            } @else {
                $suffix: '="#{$i * 5}"';
            }

            $offsets: $offsets + '[flex-offset#{$suffix}], ';
        }

        #{$offsets} {
            margin-left: #{$i * 5 + '%'};
        }
    }

    @each $i in 33 {
        $offsets: '';
        $suffix: '';

        @each $s in $sizes {
            @if $s != '' {
                $suffix: '-#{$s}="#{$i}"';
            } @else {
                $suffix: '="#{$i}"';
            }

            $offsets: '[flex-offset#{$suffix}], ';
        }

        #{$offsets} {
            margin-left: calc(100% / 3);
        }
    }

    @each $i in 66 {
        $offsets: '';
        $suffix: '';

        @each $s in $sizes {
            @if $s != '' {
                $suffix: '-#{$s}="#{$i}"';
            } @else {
                $suffix: '="#{$i}"';
            }

            $offsets: '[flex-offset#{$suffix}]';
        }

        #{$offsets} {
            margin-left: calc(200% / 3);
        }
    }
}

@mixin layout-for-name($name: null) {
    @if $name == null {
        $name: '';
    }
    @if $name != '' {
        $name: '-#{$name}';
    }

    [layout#{$name}], [layout#{$name}="column"], [layout#{$name}="row"] {
        box-sizing: border-box;
        display: -webkit-box;
        display: -webkit-flex;
        display: -moz-box;
        display: -ms-flexbox;
        display: flex;
    }
    [layout#{$name}="column"] {
        flex-direction: column;
    }
    [layout#{$name}="row"] {
        flex-direction: row;
    }
}

@mixin flex-properties-for-name($name: null) {
    $flexName: 'flex';
    @if $name != null {
        $flexName: 'flex-#{$name}';
        $name: '-#{$name}';
    } @else {
        $name: '';
    }

    [#{$flexName}] {
        flex: 1;
        box-sizing: border-box;
    }
    // === flex: 1 1 0%;

    // IE mediaQuery hack for 8,9,10 to set the flex-basis properly for 'flex' values
    // Details:
    // Do not use unitless flex-basis values in the flex shorthand because IE 10-11 will error.
    // Also use 0% instead of 0px since minifiers will often convert 0px to 0 (which is unitless and will have the same problem).
    // Safari, however, fails with flex-basis : 0% and requires flex-basis : 0px
    @if $name != '-print' {
        @media screen \0
        {
            [#{$flexName}] {
                flex: 1 1 0%;
            }
        }
    }

    [#{$flexName}-grow] {
        flex: 1 1 100%;
        box-sizing: border-box;
    }
    [#{$flexName}-initial] {
        flex: 0 1 auto;
        box-sizing: border-box;
    }
    [#{$flexName}-auto] {
        flex: 1 1 auto;
        box-sizing: border-box;
    }
    [#{$flexName}-none] {
        flex: 0 0 auto;
        box-sizing: border-box;
    }

    // (1-20) * 5 = 0-100%
    @for $i from 0 through 20 {
        $value: #{$i * 5 + '%'};

        [#{$flexName}="#{$i * 5}"] {
            flex: 1 1 #{$value};
            max-width: #{$value};
            max-height: 100%;
            box-sizing: border-box;
        }

        [layout="row"] > [#{$flexName}="#{$i * 5}"] {
            flex: 1 1 #{$value};
            max-width: #{$value};
            max-height: 100%;
            box-sizing: border-box;
        }

        [layout="column"] > [#{$flexName}="#{$i * 5}"] {
            flex: 1 1 #{$value};
            max-width: 100%;
            max-height: #{$value};
            box-sizing: border-box;
        }

        [layout#{$name}="row"] > [#{$flexName}="#{$i * 5}"] {
            flex: 1 1 #{$value};
            max-width: #{$value};
            max-height: 100%;
            box-sizing: border-box;
        }

        [layout#{$name}="column"] > [#{$flexName}="#{$i * 5}"] {
            flex: 1 1 #{$value};
            max-width: 100%;
            max-height: #{$value};
            box-sizing: border-box;
        }
    }

    [layout="row"] {
        > [#{$flexName}="33"], > [#{$flexName}="33"] {
            flex: 1 1 33.33%;
            max-width: 33.33%;
            max-height: 100%;
            box-sizing: border-box;
        }
        > [#{$flexName}="66"], > [#{$flexName}="66"] {
            flex: 1 1 66.66%;
            max-width: 66.66%;
            max-height: 100%;
            box-sizing: border-box;
        }
    }
    [layout="column"] {
        > [#{$flexName}="33"], > [#{$flexName}="33"] {
            flex: 1 1 33.33%;
            max-width: 100%;
            max-height: 33.33%;
            box-sizing: border-box;
        }
        > [#{$flexName}="66"], > [#{$flexName}="66"] {
            flex: 1 1 66.66%;
            max-width: 100%;
            max-height: 66.66%;
            box-sizing: border-box;
        }
    }
    [layout#{$name}="row"] {
        > [#{$flexName}="33"], > [#{$flexName}="33"] {
            flex: 1 1 33.33%;
            max-width: 33.33%;
            max-height: 100%;
            box-sizing: border-box;
        }
        > [#{$flexName}="66"], > [#{$flexName}="66"] {
            flex: 1 1 66.66%;
            max-width: 66.66%;
            max-height: 100%;
            box-sizing: border-box;
        }
    }
    [layout#{$name}="column"] {
        > [#{$flexName}="33"], > [#{$flexName}="33"] {
            flex: 1 1 33.33%;
            max-width: 100%;
            max-height: 33.33%;
            box-sizing: border-box;
        }
        > [#{$flexName}="66"], > [#{$flexName}="66"] {
            flex: 1 1 66.66%;
            max-width: 100%;
            max-height: 66.66%;
            box-sizing: border-box;
        }
    }

}

@mixin layout-align-for-name($suffix: null) {

    // Alignment attributes for layout containers' children
    // Arrange on the Main Axis
    // center, start, end, space-between, space-around
    // flex-start is the default for justify-content
    // ------------------------------

    $name: 'layout-align';
    @if $suffix != null {
        $name: 'layout-align-#{$suffix}';
    }

    [#{$name}],
    [#{$name}="start stretch"] // defaults
    {
        justify-content: flex-start;
        align-content: stretch;
        align-items: stretch;
    }
    // Main Axis Center
    [#{$name}="start"],
    [#{$name}="start start"],
    [#{$name}="start center"],
    [#{$name}="start end"],
    [#{$name}="start stretch"] {
        justify-content: flex-start;
    }

    // Main Axis Center
    [#{$name}="center"],
    [#{$name}="center start"],
    [#{$name}="center center"],
    [#{$name}="center end"],
    [#{$name}="center stretch"] {
        justify-content: center;
    }

    // Main Axis End
    [#{$name}="end"], //stretch
    [#{$name}="end center"],
    [#{$name}="end start"],
    [#{$name}="end end"],
    [#{$name}="end stretch"] {
        justify-content: flex-end;
    }

    // Main Axis Space Around
    [#{$name}="space-around"], //stretch
    [#{$name}="space-around center"],
    [#{$name}="space-around start"],
    [#{$name}="space-around end"],
    [#{$name}="space-around stretch"] {
        justify-content: space-around;
    }

    // Main Axis Space Between
    [#{$name}="space-between"], //stretch
    [#{$name}="space-between center"],
    [#{$name}="space-between start"],
    [#{$name}="space-between end"],
    [#{$name}="space-between stretch"] {
        justify-content: space-between;
    }

    // Arrange on the Cross Axis
    // center, start, end
    // stretch is the default for align-items
    // ------------------------------

    // Cross Axis Start
    [#{$name}="start start"],
    [#{$name}="center start"],
    [#{$name}="end start"],
    [#{$name}="space-between start"],
    [#{$name}="space-around start"] {
        align-items: flex-start;
        align-content: flex-start;
    }

    // Cross Axis Center
    [#{$name}="start center"],
    [#{$name}="center center"],
    [#{$name}="end center"],
    [#{$name}="space-between center"],
    [#{$name}="space-around center"] {
        align-items: center;
        align-content: center;
        max-width: 100%;
    }

    // Cross Axis Center IE overflow fix
    [#{$name}="start center"] > *,
    [#{$name}="center center"] > *,
    [#{$name}="end center"] > *,
    [#{$name}="space-between center"] > *,
    [#{$name}="space-around center"] > * {
        max-width: 100%;
        box-sizing: border-box;
    }

    // Cross Axis End
    [#{$name}="start end"],
    [#{$name}="center end"],
    [#{$name}="end end"],
    [#{$name}="space-between end"],
    [#{$name}="space-around end"] {
        align-items: flex-end;
        align-content: flex-end;
    }

    // Cross Axis  stretch
    [#{$name}="start stretch"],
    [#{$name}="center stretch"],
    [#{$name}="end stretch"],
    [#{$name}="space-between stretch"],
    [#{$name}="space-around stretch"] {
        align-items: stretch;
        align-content: stretch;
    }
}

@mixin layout-wrap-fill() {

    [layout-wrap] {
        flex-wrap: wrap;
    }

    [layout-nowrap] {
        flex-wrap: nowrap;
    }

    [layout-fill] {
        margin: 0;
        width: 100%;
        min-height: 100%;
        height: 100%;
    }
}

@mixin layouts_for_breakpoint($name:null) {
    @include flex-order-for-name($name);
    @include offset-for-name($name);
    @include layout-align-for-name($name);

    @include flex-properties-for-name($name);
    @include layout-for-name($name);
}

// Generate flex attribute selectors for the set of the screen breakpoints

@mixin layout-for-breakpoint-list() {
    @for $i from 1 through length($layout-breakpoints) {

        $suffix: nth(nth($layout-breakpoints, $i), 1);
        $screen-size: nth(nth($layout-breakpoints, $i), 2);

        @if $i == 1 {
            @media (max-width: $screen-size) {
                @include layouts_for_breakpoint($suffix);
            }
        } @else {
            $prev-screen-size: nth(nth($layout-breakpoints, $i - 1), 2);
            @media (max-width: $screen-size) and (min-width: $prev-screen-size + 1px) {
                @include layouts_for_breakpoint($suffix);
            }
        }

        @media (min-width: $screen-size + 1px) {
            @include layouts_for_breakpoint('gt-' + $suffix);
        }
    }
}

@include layout-for-breakpoint-list();

/* Generate hide and show attribute selectors for the set of the screen breakpoints
*  Rules without 'gt' postfix override ones with the postfix
*  'Show' rules override 'hide' rules
*  Example:
*  hide show-md - hidden everywhere but md screens
*  hide-gt-xs show-gt-sm hide-gt-lg - visible on xs screens, hidden on sm screens, visible on md and lg screens, hidden on screens greater than lg
*  hide show-gt-xs hide-lg - hidden on xs screens, visible on sm, md screens, hidden on lg screens, visible on screens greater than lg
*/

@mixin visibility-for-breakpoint($i) {
    $suffix: nth(nth($layout-breakpoints, $i), 1);
    $screen-size: nth(nth($layout-breakpoints, $i), 2);

    @if ($i == 1) {
        @media (max-width: $screen-size) {
            [hide]:not([show-#{$suffix}]), [hide-#{$suffix}]:not([show-#{$suffix}]) {
                display: none;
            }
        }
    } @else {
        $screen-size-prev: nth(nth($layout-breakpoints, $i - 1), 2);
        @media (max-width: $screen-size) and (min-width: $screen-size-prev + 1px) {
            [hide-#{$suffix}]:not([show-#{$suffix}]) {
                display: none;
            }

            $not-show-gt: '';
            @for $j from 1 through ($i - 1) {
                $not-show-gt-suffix: nth(nth($layout-breakpoints, $j), 1);
                $not-show-gt: str-insert($not-show-gt, ':not([show-gt-' + $not-show-gt-suffix + '])', str-length($not-show-gt));
            }
            [hide]:not([show-#{$suffix}])#{$not-show-gt} {
                display: none;
            }

            @for $j from 1 through ($i - 1) {
                $hide-gt-suffix: nth(nth($layout-breakpoints, $j), 1);
                $not-show-gt: '';
                @for $k from $j through ($i - 1) {
                    $not-show-gt-suffix: nth(nth($layout-breakpoints, $k), 1);
                    $not-show-gt: str-insert($not-show-gt, ':not([show-gt-' + $not-show-gt-suffix + '])', str-length($not-show-gt));
                }
                [hide-gt-#{$hide-gt-suffix}]:not([show-#{$suffix}])#{$not-show-gt} {
                    display: none;
                }
            }
        }
    }
    @if ($i == length($layout-breakpoints)) {
        @media (min-width: $screen-size + 1px) {
            $not-show-gt: '';
            @for $j from 1 through $i {
                $not-show-gt-suffix: nth(nth($layout-breakpoints, $j), 1);
                $not-show-gt: str-insert($not-show-gt, ':not([show-gt-' + $not-show-gt-suffix + '])', str-length($not-show-gt));
            }
            [hide]#{$not-show-gt} {
                display: none;
            }

            @for $j from 1 through $i {
                $hide-gt-suffix: nth(nth($layout-breakpoints, $j), 1);
                $not-show-gt: '';
                @for $k from $j through $i {
                    $not-show-gt-suffix: nth(nth($layout-breakpoints, $k), 1);
                    $not-show-gt: str-insert($not-show-gt, ':not([show-gt-' + $not-show-gt-suffix + '])', str-length($not-show-gt));
                }
                [hide-gt-#{$hide-gt-suffix}]#{$not-show-gt} {
                    display: none;
                }
            }
        }
    }
}

@for $i from 1 through length($layout-breakpoints) {
    @include visibility-for-breakpoint($i);
}

/*
*
*  Adaptive Print settings with Breakpoint Aliases\
*
*/

// General printing Rules resets to default Layout API
@media print {

    // Override layout API settings to use defaults when printing.

    @include layouts_for_breakpoint();
    @include layouts_for_breakpoint(print);
    @include layout-wrap-fill();

    // NOTE: the PRINT layouts will be the same as the default (no-aliase) layouts

    @include layout-for-breakpoint-list();

    // In favor of code simplicity and due to rare use of print special styling it was decided to drop print attributes with gt postfix
    // hide-print-{screen-size} and show-print-{screen-size} are available and they override regular show and hide
    @for $i from 1 through length($layout-breakpoints) {
        $suffix: nth(nth($layout-breakpoints, $i), 1);
        $screen-size: nth(nth($layout-breakpoints, $i), 2);

        @if ($i == 1) {
            @media (max-width: $screen-size) {
                [hide-print]:not([show-print-#{$suffix}]), [hide-print-#{$suffix}]:not([show-print-#{$suffix}]) {
                    display: none !important;
                }
            }
        } @else {
            $screen-size-prev: nth(nth($layout-breakpoints, $i - 1), 2);
            @media (max-width: $screen-size) and (min-width: $screen-size-prev + 1px) {
                [hide-print-#{$suffix}]:not([show-print-#{$suffix}]), [hide-print]:not([show-print-#{$suffix}]) {
                    display: none !important;
                }
            }
        }
        @if ($i == length($layout-breakpoints)) {
            @media (min-width: $screen-size  + 1px) {
                [hide-print] {
                    display: none !important;
                }
            }
        }
    }
}

/*
 *  Apply Mixins to create Layout/Flexbox styles
 *
 */

@include layouts_for_breakpoint();
@include layout-wrap-fill();
